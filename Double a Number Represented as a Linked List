# Brute-Force Approach :
class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    public ListNode doubleIt(ListNode head) {
        // Reverse the linked list
        ListNode reversedHead = reverse(head);
        
        // Carry for addition
        int carry = 0;Double a Number Represented as a Linked List
        
        // Dummy node for result list
        ListNode result = new ListNode(-1);
        ListNode resultPtr = result;
        
        // Traverse the reversed list and double each node's value
        while (reversedHead != null) {
            // Calculate sum with carry and doubled value
            int sum = carry + (reversedHead.val * 2);
            
            // Create a new node with the unit's place of sum
            ListNode temp = new ListNode(sum % 10);
            
            // Connect the new node to the result list
            resultPtr.next = temp;
            resultPtr = temp;
            
            // Update carry for the next addition
            carry = sum / 10;
            
            // Move to the next node in the reversed list
            reversedHead = reversedHead.next;
        }
        
        // If there's a carry remaining, add it as a new node
        if (carry != 0) {
            ListNode temp = new ListNode(carry);
            resultPtr.next = temp;
            resultPtr = temp;
        }
        
        // Reverse the result list and return its head
        return reverse(result.next);
    }
    
    // Function to reverse a linked list
    private ListNode reverse(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode nextNode = null;
        
        while (curr != null) {
            nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        
        return prev;
    }
    
    public static void main(String[] args) {
        // Example usage
        ListNode head = new ListNode(1);
        head.next = new ListNode(8);
        head.next.next = new ListNode(9);
        
        Solution solution = new Solution();
        ListNode result = solution.doubleIt(head);
        
        // Print the result
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.next;
        }
    }
}

# Optimal Approach :

class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    public ListNode doubleIt(ListNode head) {
        // Carry for addition
        int carry = 0;
        
        // Dummy node for result list
        ListNode result = new ListNode(-1);
        ListNode resultPtr = result;
        
        // Traverse the original list and double each node's value
        while (head != null) {
            // Calculate sum with carry and doubled value
            int sum = carry + (head.val * 2);
            
            // Create a new node with the unit's place of sum
            ListNode temp = new ListNode(sum % 10);
            
            // Connect the new node to the result list
            resultPtr.next = temp;
            resultPtr = temp;
            
            // Update carry for the next addition
            carry = sum / 10;
            
            // Move to the next node in the original list
            head = head.next;
        }
        
        // If there's a carry remaining, add it as a new node
        if (carry != 0) {
            ListNode temp = new ListNode(carry);
            resultPtr.next = temp;
            resultPtr = temp;
        }
        
        // Reverse the result list and return its head
        return reverse(result.next);
    }
    
    // Function to reverse a linked list
    private ListNode reverse(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode nextNode = null;
        
        while (curr != null) {
            nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        
        return prev;
    }
    
    public static void main(String[] args) {
        // Example usage
        ListNode head = new ListNode(9);
        head.next = new ListNode(9);
        head.next.next = new ListNode(9);
        
        Solution solution = new Solution();
        ListNode result = solution.doubleIt(head);
        
        // Print the result
        while (result != null) {
            System.out.print(result.val + " ");
            result = result
